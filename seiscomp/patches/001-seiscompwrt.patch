--- a/src/base/seedlink/apps/seedlink/config/seedlink.cfg
+++ b/src/base/seedlink/apps/seedlink/config/seedlink.cfg
@@ -7,7 +7,7 @@ network = XX
 port = 18000
 
 # Path to the base directory of SeedLink data files (disk buffer).
-filebase = @ROOTDIR@/var/lib/seedlink/buffer
+filebase = /opt/seiscomp/var/lib/seedlink/buffer
 
 # List of trusted addresses.
 trusted = 127.0.0.0/8
--- a/src/base/seedlink/apps/seedlink/config/seedlink.py
+++ b/src/base/seedlink/apps/seedlink/config/seedlink.py
@@ -565,8 +565,8 @@
         try: self._set_default("organization", self.env.getString("organization"), False)
         except: pass
 
-        self._set_default("lockfile", os.path.join("@ROOTDIR@", self.env.lockFile(self.name)), False)
-        self._set_default("filebase", os.path.join("@ROOTDIR@", "var", "lib", self.name, "buffer"), False)
+        self._set_default("lockfile", os.path.join("/opt/seiscomp", self.env.lockFile(self.name)), False)
+        self._set_default("filebase", os.path.join("/opt/seiscomp", "var", "lib", self.name, "buffer"), False)
         self._set_default("port", "18000", False)
         self._set_default("encoding", "steim2", False)
         self._set_default("trusted", "127.0.0.0/8", False)
--- a/src/base/seedlink/apps/seedlink/descriptions/seedlink.xml
+++ b/src/base/seedlink/apps/seedlink/descriptions/seedlink.xml
@@ -10,7 +10,7 @@
 					those ports must be updated as well!
 				</description>
 			</parameter>
-			<parameter name="filebase" type="dir">
+			<parameter name="filebase" type="dir" default="/opt/seiscomp/var/lib/seedlink/buffer">
 				<description>
 					Path to the base directory of SeedLink data files (disk buffer).
 				</description>
@@ -149,7 +149,7 @@
 					Maximum speed per connection (0: throttle disabled).
 				</description>
 			</parameter>
-			<parameter name="lockfile" type="string" default="@ROOTDIR@/var/run/seedlink.pid">
+			<parameter name="lockfile" type="string" default="/opt/seiscomp/var/run/seedlink.pid">
 				<description>
 					Path to lockfile to prevent multiple instances.
 				</description>
--- a/src/base/seedlink/apps/seedlink/iosystem.cc
+++ b/src/base/seedlink/apps/seedlink/iosystem.cc
@@ -2483,6 +2483,21 @@ void Connection::disconnect()
     close(cx.clientfd);
   }
     
+//*****************************************************************************
+// NoLog
+//*****************************************************************************
+
+class NoLog
+  {
+  public:
+    enum { msglen = 200 };
+
+    int operator()(int priority, const string &msg)
+      {
+        return msg.length();
+      }
+  };
+
 //*****************************************************************************
 // ConnectionManagerImpl
 //*****************************************************************************
@@ -2680,8 +2695,12 @@ void ConnectionManagerImpl::client_connect()
           }
       }
     
-    logs(LOG_NOTICE) << string(host) << ":" << port <<
-      " : opening connection" << endl;
+    Stream logs = make_stream(NoLog());
+
+    if(string(host) != "127.0.0.1")
+        logs = CPPStreams::logs.stream(string(host) + ":" + to_string(port) + " : ");
+
+    logs(LOG_NOTICE) << "opening connection" << endl;
     
     int info_level;
     bool window_extraction;
@@ -2703,9 +2722,7 @@ void ConnectionManagerImpl::client_connect()
     // check for default_station == NULL (no stations registered)...
     rc_ptr<Connection> conn = new Connection(ipaddr, host, port,
       default_station, default_network_id, rlog, info_level,
-      window_extraction, websocket, monitor, stations,
-      CPPStreams::logs.stream(string(host) + ":" + to_string(port) + " : "),
-      clientfd);
+      window_extraction, websocket, monitor, stations, logs, clientfd);
 
     connections.push_back(conn);
     fds.set_read(clientfd);
--- a/src/system/libs/python/seiscomp/kernel.py
+++ b/src/system/libs/python/seiscomp/kernel.py
@@ -182,9 +187,11 @@
         return module
 
     def start(self, module, binary, params, nohup=False):
-        cmd = binary + " " + params + " >" + self.logFile(module) + " 2>&1"
+        #cmd = binary + " " + params + " >" + self.logFile(module) + " 2>&1"
+        cmd = binary + " " + params + " > >(exec logger -t " + module + " -p local0.info) 2>&1"
         if nohup:
-            cmd = "nohup " + cmd + " &"
+            cmd = cmd + " &"
+        cmd = "bash -c '" + cmd + "' </dev/null >/dev/null 2>&1"
         return os.system(cmd)
 
     def stop(self, module, timeout):
--- a/src/system/apps/seiscomp/seiscomp
+++ b/src/system/apps/seiscomp/seiscomp
@@ -1,49 +1,11 @@
 #!/bin/sh -e
 
-# Resolve softlink to seiscomp executable first
-if test -L "$0"
-then
-    # $0 is a link
-    target="$(readlink "$0")"
-    case "$target" in
-        /*)
-            d="$target"
-            ;;
-        *)
-            d="$(dirname "$0")/$target"
-            ;;
-    esac
-else
-    # $0 is NOT a link
-    case "$0" in
-        */* | /*)
-            d="$0"
-            ;;
-        *)
-            d="$(command -v "$0")"
-            ;;
-    esac
-fi
-
-normalized_dirname() {
-    # Normalize directory name without following symlinks.
-    # Brute-force but portable.
-    cd "${1%/*}" && pwd || exit 1
-}
-
-# Determine the root directory of the 'seiscomp' utility.
-d="$(normalized_dirname "$d")"
-SEISCOMP_ROOT="$(realpath "${d%/bin}")"
-
-export SEISCOMP_ROOT
+export SEISCOMP_ROOT="/opt/seiscomp"
 export PATH="$SEISCOMP_ROOT/bin:$PATH"
 export LD_LIBRARY_PATH="$SEISCOMP_ROOT/lib:$LD_LIBRARY_PATH"
 export PYTHONPATH="$SEISCOMP_ROOT/lib/python:$PYTHONPATH"
 export MANPATH="$SEISCOMP_ROOT/share/man:$MANPATH"
 
-HOSTENV=$SEISCOMP_ROOT/etc/env/by-hostname/$(hostname)
-test -f $HOSTENV && . $HOSTENV
-
 case $1 in
     exec)
         shift
--- a/src/system/apps/seiscomp/seiscomp-python.in
+++ b/src/system/apps/seiscomp/seiscomp-python.in
@@ -14,6 +14,6 @@
 # you can also set your environment variables according to the
 # output of 'seiscomp print env'.
 
-python_executable="@PYTHON_EXECUTABLE@"
+python_executable="/usr/bin/python3"
 
 exec $python_executable "$@"
